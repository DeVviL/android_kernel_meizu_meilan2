--- drivers/scsi/hpsa.c
+++ drivers/scsi/hpsa.c
@@ -3897,6 +3896,10 @@
 
 	/* Save the PCI command register */
 	pci_read_config_word(pdev, 4, &command_register);
+	/* Turn the board off.  This is so that later pci_restore_state()
+	 * won't turn the board on before the rest of config space is ready.
+	 */
+	pci_disable_device(pdev);
 	pci_save_state(pdev);
 
 	/* find the first memory BAR, so we can find the cfg table */
@@ -3944,6 +3947,11 @@
 		goto unmap_cfgtable;
 
 	pci_restore_state(pdev);
+	rc = pci_enable_device(pdev);
+	if (rc) {
+		dev_warn(&pdev->dev, "failed to enable device.\n");
+		goto unmap_cfgtable;
+	}
 	pci_write_config_word(pdev, 4, command_register);
 
 	/* Some devices (notably the HP Smart Array 5i Controller)
@@ -4438,23 +4446,6 @@
 	if (!reset_devices)
 		return 0;
 
-	/* kdump kernel is loading, we don't know in which state is
-	 * the pci interface. The dev->enable_cnt is equal zero
-	 * so we call enable+disable, wait a while and switch it on.
-	 */
-	rc = pci_enable_device(pdev);
-	if (rc) {
-		dev_warn(&pdev->dev, "Failed to enable PCI device\n");
-		return -ENODEV;
-	}
-	pci_disable_device(pdev);
-	msleep(260);			/* a randomly chosen number */
-	rc = pci_enable_device(pdev);
-	if (rc) {
-		dev_warn(&pdev->dev, "failed to enable device.\n");
-		return -ENODEV;
-	}
-	pci_set_master(pdev);
 	/* Reset the controller with a PCI power-cycle or via doorbell */
 	rc = hpsa_kdump_hard_reset_controller(pdev);
 
@@ -4463,11 +4454,10 @@
 	 * "performant mode".  Or, it might be 640x, which can't reset
 	 * due to concerns about shared bbwc between 6402/6404 pair.
 	 */
-	if (rc) {
-		if (rc != -ENOTSUPP) /* just try to do the kdump anyhow. */
-			rc = -ENODEV;
-		goto out_disable;
-	}
+	if (rc == -ENOTSUPP)
+		return rc; /* just try to do the kdump anyhow. */
+	if (rc)
+		return -ENODEV;
 
 	/* Now try to get the controller to respond to a no-op */
 	dev_warn(&pdev->dev, "Waiting for controller to respond to no-op\n");
@@ -4478,11 +4468,7 @@
 			dev_warn(&pdev->dev, "no-op failed%s\n",
 					(i < 11 ? "; re-trying" : ""));
 	}
-
-out_disable:
-
-	pci_disable_device(pdev);
-	return rc;
+	return 0;
 }
 
 static int hpsa_allocate_cmd_pool(struct ctlr_info *h)
@@ -4625,7 +4611,6 @@
 		iounmap(h->transtable);
 	if (h->cfgtable)
 		iounmap(h->cfgtable);
-	pci_disable_device(h->pdev);
 	pci_release_regions(h->pdev);
 	kfree(h);
 }
